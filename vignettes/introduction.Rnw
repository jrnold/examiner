%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Introduction to the examiner package}
\documentclass{article}

\title{Introduction to the \textbf{examiner} Package}
\author{Jeffrey B. Arnold}

\newcommand{\varlistfont}[1]{\ttfamily #1:}
\newcommand{\RLang}{\textsf{R}}
\usepackage{enumitem}
\newlist{varlist}{description}{1}
\setlist[varlist]{font=\varlistfont, noitemsep, leftmargin=1cm}

\usepackage{hyperref}

<<echo = FALSE,results = 'hide'>>=
options(width = 40)
knitr::opts_chunk[["set"]](tidy = FALSE)
set.seed(13224)
@ 
<<results = 'asis', echo = FALSE>>=
cat(examiner::examiner_latex_header())
@ 

\begin{document}
\maketitle{}

\section{Introduction}
\label{sec:introduction}

\textbf{examiner} is a lightweight, flexible package to create multiple-choice exams.
It allows for flexible formatting of the questions, and the ability to shuffle the order of both questions and answers within questions.

By default, questions are written and stored in a yaml file, more details of which are discussed in Section \ref{sec:problems}.
The yaml file converted into a \verb|problemset| object with the function \verb|problemset_from_yaml|.
<<echo = TRUE, results = 'asis'>>=
library("examiner")
problems <- 
    problemset_from_yaml(system.file("yaml/questions.yaml", 
                                     package = "examiner"))


@ 
This loads the questions into a \texttt{problemset} object.
Using the \texttt{format} method on that object renders the questions in \LaTeX{} code.
<<results = 'asis', echo = FALSE>>=
cat(format(problems))

@ 

The order of the answers within each problem can be randomized with the argument \texttt{shuffle\_answers = TRUE},
<<echo = TRUE, results = 'asis'>>=
cat(format(problems, shuffle_answers = TRUE))
@

The order of problems can be randomized with the argument \texttt{shuffle\_problems = TRUE},
<<echo = TRUE, results = 'asis'>>=
cat(format(problems, shuffle_problems = TRUE))
@ 

The solutions to the problems are shown if \texttt{show\_solutions = TRUE},
<<echo = TRUE, results = 'asis'>>=
cat(format(problems, show_solutions = TRUE))
@ 

\section{Problemset File Format}
\label{sec:problems}

The default way of storing problem sets is in a yaml formatted file.
Details of the yaml format can be found at \href{http://yaml.org/}{yaml.org}, and the package \href{http://cran.fhcrc.org/web/packages/yaml/index.html}{yaml} implements a yaml reader and writer for R.
Yaml was chosen because it is a nice compromise between a human and computer readable format.
An example questions file is included with the package, \texttt{yaml/questions.yaml}, and looks like this,
<<results = 'markup', highlight = FALSE, comment = "", echo = FALSE>>=
library("stringr")
cat(str_c(readLines(system.file("yaml/questions.yaml", 
                                package = "examiner")),
          collapse = "\n"))
                                               
@ 

For a more complex example that includes both \texttt{problems} and \texttt{problemlock} objects see \texttt{yaml/questions2.yaml} (output not shown here):
<<eval=FALSE>>=
cat(str_c(readLines(system.file("yaml/questions.yaml", 
                                package = "examiner")),
          collapse = "\n"))
@ 

A single yaml document is assumed to represent a single \texttt{problemset} object.
The format of the various blocks in the yaml file transparently map into the arguments of the \texttt{problemset}, \texttt{problem}, and \texttt{problemblock} functions to produce objects of those classes.
Optional arguments do not need to be included, and will be set to the defaults in those functions.
Most notably, if \texttt{correct} is missing, the first element in the \texttt{answers} list is assumed to be correct.
To allow for multiple correct answers, simply make \texttt{correct} a vector with the indices of the correct answers in \texttt{answers}.

Note that \texttt{problemset\_from\_yaml} simply uses \texttt{yaml.load\_file} to load the file, and \texttt{problemset\_from\_list} to onvert it into a list.
All that is required to support another format is a function that returns a \texttt{problemset} object.

\section{\LaTeX{} environments}

Using the default settings, \texttt{format} command generates the following \LaTeX{} output,
<<echo = FALSE, results = 'markup', highlight = FALSE, comment = "">>=
cat(format(problems))
@ 
Note that the output is enclosed in the environments: \texttt{problemset}, \texttt{problemsetpretext}, \texttt{problemsetposttext}, \texttt{problems}, \texttt{problem}, \texttt{problemtext}, and \texttt{answers}.
These environments can be defined or redefined to change the look of the problemset.

The default definitions for these environments are included in the package, and can be accessed through the function \texttt{examiner\_latex\_header}:
<<>>=
cat(examiner_latex_header())
@ 
This can be placed in a knitr chunk with option \texttt{results='asis'} in order to define the environments.


\section{Format and Templates}
\label{sec:format-templates}

\newcommand{\examinerNZero}{\item[cnt\_problem\_0] Problem number, all problems, including those within \texttt{problemblock} objects.}
\newcommand{\examinerNZeroA}{\item[cnt\_problem\_0\_fmt] Output of \texttt{format\_cnt\_problem\_0(cnt\_problem\_0)}.}
\newcommand{\examinerNOne}{\item[cnt\_problem\_1] Problem number (top level \texttt{problem} or \texttt{problemblock} objects).}
\newcommand{\examinerNOneA}{\item[cnt\_problem\_1\_fmt] Output of \texttt{format\_cnt\_problem\_1(cnt\_problem\_1)}.}
\newcommand{\examinerNTwo}{\item[cnt\_problem\_2] \texttt{NULL} if not in a \texttt{problemblock} object. If in a \texttt{problemblock} object, the problem number with that block.}
\newcommand{\examinerNTwoA}{\item[cnt\_problem\_2\_fmt] Output of \texttt{format\_cnt\_problem\_2(cnt\_problem\_2)}.}
\newcommand{\examinerShowSolutions}{\item[show\_solutions] \texttt{logical}. Whether to show solutions.}

The formatting of problemsets is controlled by the \texttt{format} methods for the classes defined in this package: \texttt{problemset}, \texttt{problemblock}, \texttt{problem}, and \texttt{answerlist}.
Each of these methods creates the output by combining data from the object and function arguments with a \texttt{whisker} template. 
The \textbf{whisker} package is an R implementation of the \href{http://mustache.github.io/}{mustache} templating system.
Read the \texttt{whisker} package documentation and the mustache website before continuing.

This allows for easy customization of the output of these functions through the definition of the templates used to render the output text.
For example, this will render the problems in Markdown,
<<>>=
tpl_problem <-
    str_c("{{{text}}}", "\n",
          "{{{answers}}}", 
          sep = "\n")

tpl_answerlist <-
    str_c("{{#answers}}",
          "    1. {{{text}}}",
          "{{/answers}}",
          sep = "\n")

tpl_problemset <-
    str_c(
        "{{{pretext}}}\n",
        "{{#problems}}",
        "1. {{{.}}}",
        "{{/problems}}",
        "\n{{{posttext}}}",
        sep = "\n")

tpl_problemblock <-
    str_c(
        "    {{{pretext}}}\n",
        "    {{#problems}}",
        "        1. {{{.}}}",
        "    {{/problems}}",
        "    {{{posttext}}}\n",
        sep = "\n")

cat(format(problems, 
           tpl_problem = tpl_problem,
           tpl_answerlist = tpl_answerlist,
           tpl_problemset = tpl_problemset,
           tpl_problemblock = tpl_problemblock
           ), "\n")

@ 

The data context in which the template is rendered is the object plus arguments to format converted to a list.
Additionally, \texttt{foramt} is called on all \texttt{answerlist}, \texttt{problem} or \texttt{problemset} in it.
The following sections describe the templates the data used in each.

\subsection{answerlist}

The default template used to format \texttt{answerlist} objects is:
<<>>=
cat(examiner_opts$tpl_answers)
@ 

The data which is passed to \texttt{tpl\_answerlist} is a list with these elements:
\begin{varlist}
\item[answers] list of list objects generated from calling \texttt{rowSplit} on the \texttt{answerlist} object. In addition to the columns in \texttt{answerlist}, there is the column \texttt{i\_fmt} which is \texttt{i} formatted with \texttt{format\_i}.
\examinerNZero{}
\examinerNZeroA{}
\examinerNOne{}
\examinerNOneA{}
\examinerNTwo{}
\examinerNTwoA{}
\examinerShowSolutions{}
\item[...] other arguments passed to \texttt{format}.
\end{varlist}

\subsection{problem}

The default template used to format \texttt{problem} objects is
<<>>=
cat(examiner_opts$tpl_problem)
@ 
The data which is passed to template is the  \texttt{problem} object converted into a list with the following additions and changes:
\begin{varlist}
\item[answers] Output from calling \texttt{format} on the \texttt{answers} element.
\examinerNZero{}
\examinerNZeroA{}
\examinerNOne{}
\examinerNOneA{}
\examinerNTwo{}
\examinerNTwoA{}
\examinerShowSolutions{}
\item[...] other arguments passed to \texttt{format}.
\end{varlist}



\subsection{problemblock}

The default template used to format \texttt{problemblock} objects is:
<<>>=
cat(examiner_opts$tpl_problemblock)
@ 
The data which is passed to the template is the  \texttt{problemblock} object converted into a list with the following additions and changes:
\begin{varlist}
\item[answers] Output from calling \texttt{format} on the \texttt{problems} element.
\examinerNZero{}
\examinerNZeroA{}
\item Other elements in the \texttt{problemblock} object.
\item[...] other arguments passed to \texttt{format}.
\end{varlist}

\subsection{problemset}

The default template used to format \texttt{problemset} objects is:
<<>>=
cat(examiner_opts$tpl_problembset)
@ 
The data which is passed to template is the  \texttt{problemset} object converted into a list with the following additions and changes:
\begin{varlist}
\item[problems] A \texttt{character} vector created by calling \texttt{format} on each element in \texttt{problems}.
\item[...] other arguments passed to \texttt{format}.
\end{varlist}

\section{Example}

See the contents of \texttt{inst/example} for a full working example which generates an exam with multiple versions and accompanying solutions.

\end{document}
